Setting up GapMind:

These scripts should work on any Linux system, and would probably work
on other Unix or MacOS as well. All of the code is written in perl
5. (I am using perl v5.10.1 or perl v5.16.3.)

There are two phases for running GapMind: converting the pathway
descriptions to a list of queries (which you need not do yourself),
and using the queries files to analyze genomes.


To analyze genomes:

Put the blast executables (formatdb, blastall, and fastacmd) in the
bin/blast/ subdirectory. I am currently using NCBI BLAST 2.2.18.

Put the usearch executable in the bin/ subdirectory. I am
currently using usearch 10.0.

Put the hmmsearch and hmmfetch executables in the bin/
subdirectory. I am currently using HMMER 3.1b2.

Make sure the steps files are up to date (i.e. from the gaps/aa/
subdirectory in github).

Download the queries and database files from
http://papers.genomics.lbl.gov/tmp/path.aa/aa.resources.tar.gz
or compute them yourself as described in the next section.

Format the database of characterized proteins for BLAST and
usearch:
bin/blast/formatdb -p T -o T -i tmp/path.aa/curated.faa
bin/usearch -makeudb_ublast tmp/path.aa/curated.faa -output tmp/path.aa/curated.faa.udb

To run the analysis from the command line:

Use bin/buildorgs.pl to convert the genome(s) of interest to a table
of organisms and their proteins.

Use bin/gapsearch.pl to compare the queries (one file per pathway) to
the proteins.

Use bin/gaprevsearch.pl to see if the candidates are similar to
characterized proteins tha thave other functions.

Use bin/gapsummary.pl to score all the candidates and steps and to
find the best-scoring path for each pathway. This produces three
tables: one for each pathway and rule (including the rule "all" for
the entire pathway); one for each step; and one for each candidate for
each step.

Optionally, use bin/checkGapRequirements.pl to check dependencies
between pathways.


To run the analysis using the CGI scripts:

Make sure the perl module DB_File is installed. (This depends on BerkeleyDB)

Make sure that the tmp directory is writable by apache (or by
everyone). Then visit cgi/gapView.cgi


To convert steps to queries:

This requires two protein databases: a list of characterized and curated
proteins (from the characterized subset of PaperBLAST), and a
supplementary set of curated mostly-uncharacterized proteins (from
Swiss-Prot).

If you have the PaperBLAST database and the ind/uniprot_sprot.dat.gz
file from downloading Swiss-Prot, then you can set up the various
databases that are needed by running:

nice bin/setupGaps.pl  -ind ind -data paperblast_data_directory -out tmp/path.setname

where setname would be aa for the amino acid biosynthesis pathways and
tmp/ is relative to the code base.

Alternatively, you can download curated.faa and curated.faa.info as described
above and build BLAST and usearch
databases with formatdb and usearch -makeudb_ublast as described
above. Then download the Swiss-Prot data file and use

zcat ind/uniprot_sprot.dat.gz | bin/sprotCuratedEc.pl > curated2.tmp
bin/usearch -cluster_fast curated2.tmp -id 0.6 -uc curated2.tmp.uc
bin/clusterEc.pl curated2.tmp curated2.tmp.uc > tmp/path.aa/curated2.faa

sprotCuratedEc.pl relies on the swissknife perl library, which must be
available via lib/SWISS/SWISS/*.pm.

Converting steps to queries also requires two databases of HMMs: PFam
and TIGRFam. Put these in the hmm/ directory (relative to the code
base) and set it up to include Pfam-A.hmm and TIGRFAMs.hmm (in our
case, a symbolic link to TIGRFAMs_15.0_HMM.LIB).  You'll need to run
hmmpress on both of these files. Finally, you'll need to tab-delimited
tables with metadata about the HMMs. For TIGRFam, which is no longer
updated, you can use the table in the PaperBLAST code base:

cp gaps/tigrinfo hmm/

For PFam, use this command to make the table:

perl -e 'print "acc\tname\n"; while(<STDIN>) { chomp; $name = $1 if m/^NAME\s+(.*)$/; $acc = $1 if m/^ACC\s+(.*)$/; next unless $_ eq "//"; print "$acc\t$name\n" if $name && $acc; $name = undef; $acc = undef; }' < hmm/Pfam-A.hmm > hmm/pfam.tab


Once you have setup curated.faa*, curated2.faa, pfam, and tigrfam, you
can run gapquery.pl for each pathway, i.e. for met synthesis run

bin/gapquery.pl -hmmdir hmm -steps gaps/aa/met.steps -outdir tmp/path.aa

You should now be ready to run gapsearch.pl. If you are using CGI scripts to run the analysis, also use

touch path.setname/date

to indicate that the pathway definition has been compiled. If using the CGI scripts, you should also run

(cd tmp/path.setname && tar czf aa.resources.tar.gz *.query *.hmm curated.faa curated.faa.info)

so that others can download the database versions you used.


To define your own set of pathways:

Choose a new setname ("aa" is the existing setname for amino acid
biosynthesis) and create a new gaps/setname directory in the suorce
code base.

For each pathway, create a pathway.steps file. There is some
documentation of the file format in bin/gapquery.pl, or see examples
in gaps/aa/*.steps.

Create a tab-delimited file setname/setname.table, with the fields
pathwayId and desc. It should include a row for each pathwayId that
has a pathwayId.steps file and for pathwayId = all. For an example,
see gaps/aa/aa.table

If you will be using gapView.cgi to view the results, create a
tab-delimited file of curated gaps in
gaps/setname/setname.curated.gaps.tsv. It must have a header line the
fields gdb gid pathway step class comment. (gdb is the genome
database, such as "NCBI", and gid is the genome identifier.) There
need not be any other rows. For an example, see
gaps/aa/aa.curated.gaps.tsv

If you will be using gapView.cgi to view the results, or if you want
to note dependencies between pathways, create a tab-delimited file of
dependencies. See gaps/aa/requires.tsv for an example. The required
fields are rule, requires, and comment. Dependencies are optional but
the header line is required.

